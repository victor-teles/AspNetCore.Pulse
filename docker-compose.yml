version: '3'
services:
    sqlserver:
        image: mcr.microsoft.com/mssql/server
        restart: always
        ports:
            - 5433:1433
        environment:
            - ACCEPT_EULA=Y
            - SA_PASSWORD=Password12!
    redis:
        image: redis:alpine
        ports:
            - ${REDIS_PORT}:6379
    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:6.3.2
        ports:
          - "9300:9300"
          - ${ELASTICSEARCH_PORT}:9200
    solr:
        image: solr:8.4.1
        ports:
            - ${SOLR_PORT}:8983
        volumes:
            - ./build/docker-services/solrcore:/var/solr/data/solrcore
            - ./build/docker-services/solrcoredown:/var/solr/data/solrcoredown
    postgres:
        image: postgres
        environment:
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        ports:
            - ${POSTGRES_PORT}:5432
    eventstore:
        image: eventstore/eventstore
        ports:
          - ${EVENTSTORE_GRPC_PORT}:2113
          - ${EVENTSTORE_PORT}:1113
        environment:
            - EVENTSTORE_INSECURE=true
    mongodb:
        image: mongo
        ports:
            - ${MONGODB_PORT}:27017
    mysql:
        image: mysql
        environment:
            - MYSQL_ROOT_PASSWORD=${MYSQL_PASSWORD}
        ports:
            - ${MYSQL_PORT}:3306
    zookeeper:
        image: confluent/zookeeper
        ports:
            - ${ZOOKEEPER_PORT}:2181
    raven:
        image: ravendb/ravendb
        ports:
            - ${RAVENDB_PORT}:8080
        environment:
            - RAVEN_ARGS=--Setup.Mode=None
    kafka:
        image: confluent/kafka
        environment:
            - KAFKA_ADVERTISED_HOST_NAME=localhost
            - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
            - KAFKA_ADVERTISED_PORT=9092
        ports:
          - ${KAFKA_PORT}:9092
        links:
          - zookeeper
    rabbitmq:
        image: rabbitmq
        ports:
          - ${RABBITMQ_PORT}:5672
    idsvr:
        image: nakah/identityserver4
        ports:
          - ${IDSVR_PORT}:80
    oracle:
# Build image from src, pending legal issues with binary distribution https://github.com/wnameless/docker-oracle-xe-11g/issues/118
        build:
          context: https://github.com/wnameless/docker-oracle-xe-11g.git
        ports:
            - ${ORACLE_PORT}:1521
        environment:
            - ORACLE_ALLOW_REMOTE=true
    ftp:
        image: bogem/ftp
        ports:
            - ${FTP_PORT}:21
            - 47400-47470:47400-47470
        environment:
            - FTP_USER=${FTP_USER}
            - FTP_PASS=${FTP_PASS}
            - PASV_ADDRESS=127.0.0.1
    sftp:
        image: atmoz/sftp
        ports:
            - ${SFTP_PORT}:22
        volumes:
            - ./build/docker-services/certificate/id_rsa.pub:/home/foo/.ssh/keys/id_rsa.pub:ro
        command: foo:pass:::upload
    mail:
        image: tvial/docker-mailserver:latest
        hostname: mail
        container_name: mail
        domainname: Pulse.com
        ports:
            - 25:25
            - 143:143
            - 465:465
            - 587:587
            - 993:993
            - 995:995
        environment:
            - SSL_TYPE=self-signed
            - DMS_DEBUG=1
        volumes:
            - ./build/docker-services/mail/:/tmp/docker-mailserver/
    localstack:
        image: localstack/localstack
        ports:
        - "4567-4584:4567-4584"
        - "${PORT_WEB_UI-8080}:${PORT_WEB_UI-8080}"
        environment:
        - SERVICES=${SERVICES- }
        - DEBUG=${DEBUG- }
        - DATA_DIR=${DATA_DIR- }
        - PORT_WEB_UI=${PORT_WEB_UI- }
        - LAMBDA_EXECUTOR=${LAMBDA_EXECUTOR- }
        - KINESIS_ERROR_PROBABILITY=${KINESIS_ERROR_PROBABILITY- }
        - DOCKER_HOST=unix:///var/run/docker.sock
        volumes:
        - "${TMPDIR:-/tmp/localstack}:/tmp/localstack"
        - "/var/run/docker.sock:/var/run/docker.sock"
    consul:
        image: hashicorp/consul:latest
        ports:
          - "8500:8500"
          - "8600:8600"
    ibmmq:
        image: ibmcom/mq
        ports:
        - "1414:1414"
        - "9157:9157"
        environment:
        - LICENSE=accept
        - MQ_QMGR_NAME=QM1
        - MQ_APP_PASSWORD=12345678
        - MQ_ENABLE_METRICS=true
    arangodb:
        image: arangodb/arangodb:latest
        ports:
        - "8529:8529"
        environment:
        - ARANGO_ROOT_PASSWORD=strongArangoDbPassword
    gremlin:
        image: tinkerpop/gremlin-server
        ports:
        - "8182:8182"
        environment:
        - VIRTUAL_HOST=gremlin.docker
        - VIRTUAL_PORT=8182
    npgsql:
        image: postgres
        ports:
        - "8010:5432"
        environment:
        - POSTGRES_USER=postgres
        - POSTGRES_PASSWORD=Password12!
    nats:
        image: nats:latest
        ports:
        - "4222:4222"
        - "8222:8222"
        - "6222:6222"
    influx:
        image: influxdb:2.6.0
        restart: always
        ports:
         - "8086:8086"
        environment:
          DOCKER_INFLUXDB_INIT_MODE: setup
          DOCKER_INFLUXDB_INIT_USERNAME: ci_user
          DOCKER_INFLUXDB_INIT_PASSWORD: password
          DOCKER_INFLUXDB_INIT_ORG: influxdata
          DOCKER_INFLUXDB_INIT_BUCKET: dummy
    minio:
      container_name: milvus-minio
      image: minio/minio:RELEASE.2023-03-20T20-16-18Z
      environment:
        MINIO_ROOT_USER: minioadmin
        MINIO_ROOT_PASSWORD: minioadmin
      ports:
        - "9001:9001"
        - "9000:9000"
      volumes:
        - minio-data:/minio_data
      command: minio server /minio_data --console-address ":9001"
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
        interval: 30s
        timeout: 20s
        retries: 3
    etcd:
      container_name: milvus-etcd
      image: quay.io/coreos/etcd:v3.5.5
      environment:
        - ETCD_AUTO_COMPACTION_MODE=revision
        - ETCD_AUTO_COMPACTION_RETENTION=1000
        - ETCD_QUOTA_BACKEND_BYTES=4294967296
        - ETCD_SNAPSHOT_COUNT=50000
      volumes:
        - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd
      command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
      healthcheck:
        test: ["CMD", "etcdctl", "endpoint", "health"]
        interval: 30s
        timeout: 20s
        retries: 3
    milvus:
      container_name: milvus-standalone
      image: milvusdb/milvus:v2.3.0
      command: ["milvus", "run", "standalone"]
      security_opt:
      - seccomp:unconfined
      environment:
        ETCD_ENDPOINTS: etcd:2379
        MINIO_ADDRESS: minio:9000
      volumes:
        - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
        interval: 30s
        start_period: 90s
        timeout: 20s
        retries: 3
      ports:
        - "19530:19530"
        - "9091:9091"
      depends_on:
        - "etcd"
        - "minio"

volumes:
   minio-data:
      driver: local
