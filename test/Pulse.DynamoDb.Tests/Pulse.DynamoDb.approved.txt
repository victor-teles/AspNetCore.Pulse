namespace Pulse.DynamoDb
{
    public class DynamoDBOptions
    {
        public DynamoDBOptions() { }
        [System.Obsolete("Specify access key and secret as a BasicCredential to Credentials property instea" +
            "d")]
        public string? AccessKey { get; set; }
        public Amazon.Runtime.AWSCredentials? Credentials { get; set; }
        public string? LastEvaluatedTableName { get; set; }
        public int? Limit { get; set; }
        public Amazon.RegionEndpoint RegionEndpoint { get; set; }
        [System.Obsolete("Specify access key and secret as a BasicCredential to Credentials property instea" +
            "d")]
        public string? SecretKey { get; set; }
    }
    public class DynamoDbHealthCheck : Microsoft.Extensions.Diagnostics.Pulse.IHealthCheck
    {
        public DynamoDbHealthCheck(Pulse.DynamoDb.DynamoDBOptions options) { }
        public System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.Pulse.HealthCheckResult> CheckHealthAsync(Microsoft.Extensions.Diagnostics.Pulse.HealthCheckContext context, System.Threading.CancellationToken cancellationToken = default) { }
    }
}
namespace Microsoft.Extensions.DependencyInjection
{
    public static class DynamoDbHealthCheckBuilderExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddDynamoDb(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Action<Pulse.DynamoDb.DynamoDBOptions>? setup = null, string? name = null, Microsoft.Extensions.Diagnostics.Pulse.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
    }
}
